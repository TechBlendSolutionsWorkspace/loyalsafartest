Wipe out all legacy codebases, frameworks, and dependencies (including Node.js, Express.js, or any JavaScript backend remnants). Rebuild the Ride-Booking Driver Application exclusively with the specified tech stack below. No exceptions.

â¸»

âœ… Approved Technology Stack
	â€¢	Backend Framework: Laravel (PHP)
	â€¢	Programming Language: PHP
	â€¢	UI Framework: Bootstrap (4.4.1)
	â€¢	Frontend Libraries:
	â€¢	jQuery (3.4.1)
	â€¢	List.js
	â€¢	Highlight.js
	â€¢	FancyBox (3.5.7)
	â€¢	Swiper
	â€¢	Flickity
	â€¢	core-js (3.2.1)
	â€¢	Font Awesome
	â€¢	Web Server: Apache HTTP Server (2.4.41)
	â€¢	Operating System: Ubuntu
	â€¢	Debugging Tools: PHPDebugBar

â¸»

ðŸ”¥ Hard Reset Instructions
	1.	Remove All Legacy Tech
	â€¢	Delete Node.js, Express.js, npm modules, and any associated configs.
	â€¢	Clean up all old code files, unused routes, services, and APIs.
	â€¢	Reset version control (start a new clean repository).
	2.	Database Reset
	â€¢	Drop all existing schemas.
	â€¢	Design a fresh relational schema for:
	â€¢	Users (passenger/driver)
	â€¢	Vehicles
	â€¢	Rides & Bookings
	â€¢	Payments & Transactions
	â€¢	Ratings/Feedback
	â€¢	Admin/Operations
	3.	Core System Modules
	â€¢	Passenger App â†’ Request ride, track ride, see history, process payments.
	â€¢	Driver App â†’ Accept/decline rides, earnings dashboard, availability toggle.
	â€¢	Admin Dashboard â†’ User management, driver verification, system monitoring, analytics.
	4.	UI/Frontend Rules
	â€¢	Use Bootstrap 4.4.1 for all layout and styling.
	â€¢	Font Awesome for consistent icons.
	â€¢	Apply Swiper, Flickity, FancyBox for user-facing interactions.
	â€¢	Use List.js for filtering/search inside admin/user dashboards.
	â€¢	Highlight.js for admin-side code/log formatting (optional).
	5.	Backend Rules
	â€¢	Strictly Laravel (PHP) â€“ no Node.js, no Express.
	â€¢	RESTful API design for passenger â†” driver â†” admin communication.
	â€¢	Middleware for authentication & security.
	â€¢	Use Eloquent ORM for clean DB handling.
	6.	Security & Optimization
	â€¢	Full CSRF, XSS, SQL Injection protection.
	â€¢	Role-based access control (Admin / Driver / Passenger).
	â€¢	Caching and queue system for ride-matching.
	7.	Deployment Rules
	â€¢	Server: Ubuntu + Apache 2.4.41.
	â€¢	Continuous Integration pipeline with auto-build/test/deploy.
	â€¢	Zero reliance on Node.js or Express at any stage.

â¸»

âš¡ Directive

Completely purge all old technologies (especially Node.js + Express). Rebuild from scratch with only the stack listed above. Deliver a clean, stable, production-ready ride-booking driver app that is modular, scalable, and future-proof.